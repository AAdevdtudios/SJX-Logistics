// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SjxLogistics.Data;

namespace SjxLogistics.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20220309102227_OrderChanged")]
    partial class OrderChanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Audit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("text");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("ControllerName")
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<string>("IsFirstLogin")
                        .HasColumnType("text");

                    b.Property<string>("LangId")
                        .HasColumnType("text");

                    b.Property<string>("LoggedInAt")
                        .HasColumnType("text");

                    b.Property<string>("LoggedOutAt")
                        .HasColumnType("text");

                    b.Property<string>("LoginStatus")
                        .HasColumnType("text");

                    b.Property<string>("PageAccessed")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("UrlReferrer")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("AuditId");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Bikes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BikeNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RidersName")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Bikes");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Drafts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Categories")
                        .HasColumnType("text");

                    b.Property<string>("EndAddress")
                        .HasColumnType("text");

                    b.Property<string>("StartAddress")
                        .HasColumnType("text");

                    b.Property<int?>("UsersId")
                        .HasColumnType("integer");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<int>("weight")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("UsersId");

                    b.ToTable("Drafts");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("MessageType")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Charges")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomersEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Delivery")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsExpressDelivery")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text");

                    b.Property<string>("PickUp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PickUpDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PickUpTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReceiversName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiversPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Refno")
                        .HasColumnType("text");

                    b.Property<int?>("RidersId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UsersId")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RidersId");

                    b.HasIndex("UsersId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Users");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Riders", b =>
                {
                    b.HasBaseType("SjxLogistics.Models.DatabaseModels.Users");

                    b.Property<int?>("Bikeid")
                        .HasColumnType("integer");

                    b.HasIndex("Bikeid");

                    b.HasDiscriminator().HasValue("Riders");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Drafts", b =>
                {
                    b.HasOne("SjxLogistics.Models.DatabaseModels.Users", null)
                        .WithMany("Drafts")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Notifications", b =>
                {
                    b.HasOne("SjxLogistics.Models.DatabaseModels.Users", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Order", b =>
                {
                    b.HasOne("SjxLogistics.Models.DatabaseModels.Riders", null)
                        .WithMany("AssignedOrders")
                        .HasForeignKey("RidersId");

                    b.HasOne("SjxLogistics.Models.DatabaseModels.Users", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("UsersId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Riders", b =>
                {
                    b.HasOne("SjxLogistics.Models.DatabaseModels.Bikes", "Bike")
                        .WithMany()
                        .HasForeignKey("Bikeid");

                    b.Navigation("Bike");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Users", b =>
                {
                    b.Navigation("Drafts");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SjxLogistics.Models.DatabaseModels.Riders", b =>
                {
                    b.Navigation("AssignedOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
